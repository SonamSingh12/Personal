package com.sonam.test.service.client.rest;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.sonam.test.constans.Constants;
import com.sonam.test.vo.pat.PatSmsVO;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

@Service
public class SmsServiceClient {

	static final Logger LOGGER = LoggerFactory.getLogger(SmsServiceClient.class);

	public String sendSms(PatSmsVO requestData) {
		LOGGER.info("SEND SMS TO " + requestData.getNumber());
		String respuesta = "";
		try {

			OkHttpClient okHttpClient = prepareClient();

			MediaType mediaType = MediaType.parse("application/json");
			RequestBody body = RequestBody.create(mediaType,
					"{\"usrClient\":\"Farsonam\",\"pasClient\":\"eikd.20!DS2\",\"sender\":\"sonam\"," + "\"gsm\":\"52"
							+ requestData.getNumber() + "\",\"text\":\"" + requestData.getMessage() + "\"}");
			Request request = new Request.Builder()
					.url(Constants.URL_SMS).post(body)
					.addHeader("content-type", "application/json")
					.build();

			Response response = okHttpClient.newCall(request).execute();
			respuesta = String.valueOf(response.code());

		} catch (Exception e) {
			LOGGER.error(e.getMessage(), e);
			respuesta = "503";
		}

		return respuesta;
	}

	private OkHttpClient prepareClient() throws NoSuchAlgorithmException, KeyManagementException {
		OkHttpClient.Builder builder = prepareBuilder();

		Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("sysproxy.wal-mart.com", 8080));

		OkHttpClient okHttpClient = builder.proxy(proxy).build();
		return okHttpClient;
	}

	private OkHttpClient.Builder prepareBuilder() throws NoSuchAlgorithmException, KeyManagementException {
		final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
			@Override
			public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType)
					throws CertificateException {
			}

			@Override
			public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType)
					throws CertificateException {
			}

			@Override
			public java.security.cert.X509Certificate[] getAcceptedIssuers() {
				return new java.security.cert.X509Certificate[] {};
			}
		} };

		// Install the all-trusting trust manager
		final SSLContext sslContext = SSLContext.getInstance("SSL");
		sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
		// Create an ssl socket factory with our all-trusting manager
		final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();

		OkHttpClient.Builder builder = new OkHttpClient.Builder();
		builder.sslSocketFactory(sslSocketFactory, (X509TrustManager) trustAllCerts[0]);
		builder.hostnameVerifier(new HostnameVerifier() {
			@Override
			public boolean verify(String hostname, SSLSession session) {
				return true;
			}
		});
		return builder;
	}

}